# @generated by generate_proto_mypy_stubs.py.  Do not edit!
from google.protobuf.descriptor import (
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from test.proto.test3_pb2 import (
    OuterEnum as test___proto___test3_pb2___OuterEnum,
)

from typing import (
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    cast as typing___cast,
)


class Nested(google___protobuf___message___Message):
    a = ... # type: test___proto___test3_pb2___OuterEnum

    def __init__(self,
        a : typing___Optional[test___proto___test3_pb2___OuterEnum] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Nested: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...

class AnotherNested(google___protobuf___message___Message):
    class NestedEnum(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> AnotherNested.NestedEnum: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[AnotherNested.NestedEnum]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, AnotherNested.NestedEnum]]: ...
    INVALID = typing___cast(NestedEnum, 0)
    ONE = typing___cast(NestedEnum, 1)
    TWO = typing___cast(NestedEnum, 2)

    class NestedMessage(google___protobuf___message___Message):
        class NestedEnum2(int):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            @classmethod
            def Name(cls, number: int) -> str: ...
            @classmethod
            def Value(cls, name: str) -> AnotherNested.NestedMessage.NestedEnum2: ...
            @classmethod
            def keys(cls) -> typing___List[str]: ...
            @classmethod
            def values(cls) -> typing___List[AnotherNested.NestedMessage.NestedEnum2]: ...
            @classmethod
            def items(cls) -> typing___List[typing___Tuple[str, AnotherNested.NestedMessage.NestedEnum2]]: ...
        UNDEFINED = typing___cast(NestedEnum2, 0)
        NESTED_ENUM1 = typing___cast(NestedEnum2, 1)
        NESTED_ENUM2 = typing___cast(NestedEnum2, 2)

        s = ... # type: typing___Text
        b = ... # type: bool
        ne = ... # type: AnotherNested.NestedEnum
        ne2 = ... # type: AnotherNested.NestedMessage.NestedEnum2

        def __init__(self,
            s : typing___Optional[typing___Text] = None,
            b : typing___Optional[bool] = None,
            ne : typing___Optional[AnotherNested.NestedEnum] = None,
            ne2 : typing___Optional[AnotherNested.NestedMessage.NestedEnum2] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> AnotherNested.NestedMessage: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...


    def __init__(self,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> AnotherNested: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
