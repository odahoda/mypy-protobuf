syntax = "proto2";

package test;

import "test/proto/inner/inner.proto";
import "test/proto/nested/nested.proto";
import "test/proto/nopackage.proto";
import "test/proto/test3.proto";

enum OuterEnum {
  FOO = 1;
  BAR = 2;
}

message Simple1 {
  enum InnerEnum {
    INNER1 = 1;
    INNER2 = 2;
  }
  message InnerMessage {}

  optional string a_string = 1;
  repeated string a_repeated_string = 2;
  optional bool a_boolean = 3;
  optional uint32 a_uint32 = 4;
  optional OuterEnum a_enum = 5;
  optional test3.OuterEnum a_external_enum = 6;

  optional inner.Inner a_inner = 7;
  optional test.nested_package.Nested a_nested = 12;

  optional InnerEnum inner_enum = 8;
  repeated InnerEnum rep_inner_enum = 9;
  optional InnerMessage inner_message = 10;
  repeated InnerMessage rep_inner_message = 11;

  optional NoPackage no_package = 13;
  optional test.nested_package.AnotherNested.NestedEnum nested_enum = 14;
  optional test.nested_package.AnotherNested.NestedMessage nested_message = 15;
}

message Simple2 {
  required string a_string = 1;
}

option py_generic_services = true;
service TestService {
    rpc Echo(Simple1) returns (Simple2) {}
}
